"use strict";(self.webpackChunktil=self.webpackChunktil||[]).push([[9671],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},s="TDD, Where Dit It All Go Wrong",c={unversionedId:"intro",id:"intro",title:"TDD, Where Dit It All Go Wrong",description:"This section is based on my watching the youtube video called, TDD, Where Dit It All Go Wrong (Ian Cooper)",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Tutorial - Basics",permalink:"/docs/category/tutorial---basics"}},p={},u=[{value:"Summary",id:"summary",level:2},{value:"Recommended reading",id:"recommended-reading",level:3},{value:"How to do TDD right",id:"how-to-do-tdd-right",level:3},{value:"Red-Green-Refactor",id:"red-green-refactor",level:3},{value:"Clean Code When?",id:"clean-code-when",level:4},{value:"Code Smells",id:"code-smells",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tdd-where-dit-it-all-go-wrong"},"TDD, Where Dit It All Go Wrong"),(0,r.kt)("p",null,"This section is based on my watching the youtube video called, ",(0,r.kt)("strong",{parentName:"p"},"TDD, Where Dit It All Go Wrong (Ian Cooper)")),(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/EZ05e7EMOLM",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("h3",{id:"recommended-reading"},"Recommended reading"),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"/img/tdd_kent_beck.jpg",style:{height:"400px"}}),(0,r.kt)("figcaption",{align:"left"},(0,r.kt)("b",null,"Test-Driven Development by Example by Kent Beck"))),(0,r.kt)("p",null,"Ian says the most important thing to take away from the book is:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Avoid testing implementation details, test behaviors")),(0,r.kt)("h3",{id:"how-to-do-tdd-right"},"How to do TDD right"),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"wrong things to do")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Many practice TDD by using ",(0,r.kt)("em",{parentName:"li"},"adding a new method to a class")," as the trigger to write a test."),(0,r.kt)("li",{parentName:"ul"},"A test-case per class approach fails to capture the ethos for TDD."),(0,r.kt)("li",{parentName:"ul"},"Adding a new class is not the trigger for writing tests."),(0,r.kt)("li",{parentName:"ul"},"Do not write tests for implementation details ","\u2013"," these change!")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"correct things to do")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"In TDD, creating a new test is that you have a requirement you want to implement."),(0,r.kt)("li",{parentName:"ul"},"the trigger is implementing a requirement."),(0,r.kt)("li",{parentName:"ul"},"Test the public API.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exports")," from a module."),(0,r.kt)("li",{parentName:"ul"},"the stable idea of your software; how you implement the requirement is unstable."),(0,r.kt)("li",{parentName:"ul"},"the contract your software has with the world."))),(0,r.kt)("li",{parentName:"ul"},"Writing tests to cover the use cases or stories.")))),(0,r.kt)("p",null,"The object of TDD is to test ",(0,r.kt)("em",{parentName:"p"},"behaviors")," in the system."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When we write a test, we imagine the perfect interface for our operation. We are telling ourselves a story about how the operation will look from the outside. Our story won't always come true, but it's better to start from the best possible application programming interface (API) and work backward.")),(0,r.kt)("p",null,"The unit of isolation is the ",(0,r.kt)("em",{parentName:"p"},"test"),", not the thing ",(0,r.kt)("em",{parentName:"p"},"under test")," (for example, class)."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We avoid file system, database, simply because these ",(0,r.kt)("em",{parentName:"p"},"shared fixture")," elements prevent us running in isolation from other ",(0,r.kt)("em",{parentName:"p"},"tests"),", or cause our tests to be slow.")),(0,r.kt)("p",null,"When we are focusing on testing individual ",(0,r.kt)("em",{parentName:"p"},"methods")," of a class, We can't refactor easily because implementation details are exposed to tests."),(0,r.kt)("h3",{id:"red-green-refactor"},"Red-Green-Refactor"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Refactor is the key in this red-green-refactor cycle.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Red")," Write a little test that doesn't work, and perhaps doesn't even compile at first in the absence of correct implementation."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Green")," Make the test work quickly, committing whatever ",(0,r.kt)("em",{parentName:"li"},"sins")," necessary in the process.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"What we're doing is making the test passed by the quickest (and perhaps dirtiest) process possible."),(0,r.kt)("li",{parentName:"ul"},"do not try to make it beautiful, do not put patterns in there yet, and just write line after line of code until it works."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Refactor")," Eliminate all of the duplications created in merely getting the test to work in ",(0,r.kt)("em",{parentName:"li"},"green")," phase (make good code).")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The different phases have different purposes. They call for different styles of solution, different aesthetic viewpoints. The first three phases need to go by quickly, so we get to a known state with the new functionality. ",(0,r.kt)("strong",{parentName:"p"},"We can commit any number of sins to get there, because speed trumps design, just for that brief moment.")),(0,r.kt)("p",{parentName:"blockquote"},"Kent Beck, TDD by Example")),(0,r.kt)("p",null,"Kent's point is essentially you can't do two things at once easily. You can't both understand the solution to the problem and engineer the code right."),(0,r.kt)("h4",{id:"clean-code-when"},"Clean Code When?"),(0,r.kt)("p",null,"The refactoring step is when we produce clean code."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It's when you remove duplication ","[Beck]"),(0,r.kt)("li",{parentName:"ul"},"It's when you sanitize the code smells ","[Fowler]"),(0,r.kt)("li",{parentName:"ul"},"It's when you apply patterns ","[Kerievsky]")),(0,r.kt)("p",null,"Because now you have a clear idea of what your solution is."),(0,r.kt)("p",null,"You do not write new unit tests when refactoring to clean code."),(0,r.kt)("p",null,"Refactoring is a process of safe moves that let you essentially change the design of the code. They do not change the behavior. Your behavior is covered by the original test."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Dependency is the key problem in software development at all scales"),(0,r.kt)("p",{parentName:"blockquote"},"Kent Beck, TDD BY Example")),(0,r.kt)("p",null,"We need to eliminate dependency between our tests and our code."),(0,r.kt)("p",null,"Coupling is what kills all software so strive to decouple your tests from your implementation details. Focus on your public contract, your stable API and leave your implementation details free of tests and avoid heavy mocking."),(0,r.kt)("p",null,"This allows us to refactor implementations without changing the tests. Don't bake implementation details into tests!"),(0,r.kt)("h3",{id:"code-smells"},"Code Smells"),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"/img/fowler_refactoring.jpg",style:{height:"400px"}}),(0,r.kt)("figcaption",{align:"left"},(0,r.kt)("b",null,"Refactoring by Martin Fowler"))),(0,r.kt)("p",null,"Fowler's book provides both step-by-step, safe recipes for performing a refactoring as well as outlining the smells in code that trigger those refactorings."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Refactoring is the process of changing a software system in such a way that it ",(0,r.kt)("strong",{parentName:"p"},"does not alter the external behavior of the code yet improves its internal structure.")," It is a disciplined way to clean up code that minimizes the chances of introducing bugs. In essence when you refactor you are improving the design of the code after it has been written."),(0,r.kt)("p",{parentName:"blockquote"},"Martin Fowler, ",(0,r.kt)("em",{parentName:"p"},"Refactoring: Improving the Design of Existing Code"))),(0,r.kt)("p",null,"Kerievsky suggests we don't try to implement patterns in the system under test. We implement patterns as improvements to the code in the refactoring step."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ideal step for applying patterns is the refactoring step because at this point I know what the solution is; I've written one (in the green phase). Now I can clean up by making a pattern.")))}d.isMDXComponent=!0}}]);